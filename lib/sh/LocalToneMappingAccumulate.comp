#include "LocalToneMappingAccumulate.h"

namespace ren::sh {

[[vk::push_constant]] LocalToneMappingAccumulateArgs pc;

[numthreads(16, 16)]
void main() {
  Sampler2D ltm_lightness = Get(pc.lightness);
  Sampler2D ltm_weights = Get(pc.weights);
  Sampler2D src_accumulator = Get(pc.src_accumulator);
  RWTexture2D dst_accumulator = Get(pc.dst_accumulator);

  vec3 weight = ltm_weights.Load(ivec3(gl_GlobalInvocationID.xy, pc.mip)).rgg; 
  weight.b = 1.0f - weight.r - weight.g;

  vec3 accumulator;
  if (pc.mip == TextureMips(src_accumulator) - 1) {
    vec3 gaussian = ltm_lightness.Load(ivec3(gl_GlobalInvocationID.xy, pc.mip)).rgb;
    accumulator = dot(gaussian, weight);
  } else {
    vec2 uv = (gl_GlobalInvocationID.xy + 0.5f) / TextureSize(dst_accumulator);

    vec3 laplacian =
      ltm_lightness.Load(ivec3(gl_GlobalInvocationID.xy, pc.mip)).rgb -
      ltm_lightness.SampleLevel(uv, pc.mip + 1).rgb;

    if (bool(pc.contrast_boost)) {
      weight *= (abs(laplacian) + 0.001f);
      weight /= (weight.r + weight.g + weight.b);
    }

    accumulator = src_accumulator.SampleLevel(uv, pc.mip + 1).rgb + dot(laplacian, weight);
  }

  dst_accumulator.Store(gl_GlobalInvocationID.xy, vec4(accumulator, 1.0f));
}

}
