#include "LocalToneMappingReduce.h"
#include "Transforms.h"

namespace ren::sh {

[[vk::push_constant]] LocalToneMappingReduceArgs pc;

[numthreads(LTM_REDUCE_GROUP_SIZE_X * LTM_REDUCE_GROUP_SIZE_Y)]
void main() {
  uvec2 lxy = swizzle_quads(gl_LocalInvocationIndex, LTM_REDUCE_GROUP_SIZE_X);

  Sampler2D src_lightness = Get(pc.src_lightness);
  Sampler2D src_weights = Get(pc.src_weights);
  RWTexture2D dst_lightness = Get(pc.dst_lightness);
  RWTexture2D dst_weights = Get(pc.dst_weights);

  vec2 inv_src_size = 1.0f / TextureSize(src_lightness, pc.src_mip);

  for (uint k = 0; k < LTM_REDUCE_UNROLL_X * LTM_REDUCE_UNROLL_Y; ++k) {
    ivec2 pos = gl_WorkGroupID.xy * LTM_REDUCE_TILE_SIZE + swizzle_zz(k, LTM_REDUCE_UNROLL_X) * LTM_REDUCE_GROUP_SIZE + lxy;
    vec2 uv = (2 * pos + 1) * inv_src_size;

    vec3 lightness = 0.0f;
    lightness +=  0.37487566f * src_lightness.SampleLevel(uv + vec2(-0.75777f, -0.75777f) * inv_src_size, pc.src_mip).rgb;
    lightness +=  0.37487566f * src_lightness.SampleLevel(uv + vec2( 0.75777f, -0.75777f) * inv_src_size, pc.src_mip).rgb;
    lightness +=  0.37487566f * src_lightness.SampleLevel(uv + vec2( 0.75777f,  0.75777f) * inv_src_size, pc.src_mip).rgb;
    lightness +=  0.37487566f * src_lightness.SampleLevel(uv + vec2(-0.75777f,  0.75777f) * inv_src_size, pc.src_mip).rgb;
    lightness += -0.12487566f * src_lightness.SampleLevel(uv + vec2(  -2.907f,      0.0f) * inv_src_size, pc.src_mip).rgb;
    lightness += -0.12487566f * src_lightness.SampleLevel(uv + vec2(   2.907f,      0.0f) * inv_src_size, pc.src_mip).rgb;
    lightness += -0.12487566f * src_lightness.SampleLevel(uv + vec2(     0.0f,   -2.907f) * inv_src_size, pc.src_mip).rgb;
    lightness += -0.12487566f * src_lightness.SampleLevel(uv + vec2(     0.0f,    2.907f) * inv_src_size, pc.src_mip).rgb;

    vec2 weight = 0.0f;
    weight +=  0.37487566f * src_weights.SampleLevel(uv + vec2(-0.75777f, -0.75777f) * inv_src_size, pc.src_mip).rg;
    weight +=  0.37487566f * src_weights.SampleLevel(uv + vec2( 0.75777f, -0.75777f) * inv_src_size, pc.src_mip).rg;
    weight +=  0.37487566f * src_weights.SampleLevel(uv + vec2( 0.75777f,  0.75777f) * inv_src_size, pc.src_mip).rg;
    weight +=  0.37487566f * src_weights.SampleLevel(uv + vec2(-0.75777f,  0.75777f) * inv_src_size, pc.src_mip).rg;
    weight += -0.12487566f * src_weights.SampleLevel(uv + vec2(  -2.907f,      0.0f) * inv_src_size, pc.src_mip).rg;
    weight += -0.12487566f * src_weights.SampleLevel(uv + vec2(   2.907f,      0.0f) * inv_src_size, pc.src_mip).rg;
    weight += -0.12487566f * src_weights.SampleLevel(uv + vec2(     0.0f,   -2.907f) * inv_src_size, pc.src_mip).rg;
    weight += -0.12487566f * src_weights.SampleLevel(uv + vec2(     0.0f,    2.907f) * inv_src_size, pc.src_mip).rg;

    if (all(pos < TextureSize(dst_lightness))) {
      dst_lightness.Store(pos, vec4(lightness, 1.0f));
      dst_weights.Store(pos, vec4(weight, 0.0f, 1.0f));
    }
  }
}

}
