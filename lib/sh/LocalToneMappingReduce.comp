#include "LocalToneMappingReduce.h"
#include "Transforms.h"

namespace ren::sh {

[[vk::push_constant]] LocalToneMappingReduceArgs pc;

vec4 filter(Sampler2D t, vec2 uv, vec2 inv_size, int mip) {
  vec4 s = 0.0f;
  s += -0.0826844273824397f * t.SampleLevel(uv + vec2(-3.0345751082467562f, 0.0f) * inv_size, mip);
  s += -0.0826844273824397f * t.SampleLevel(uv + vec2(0.0f, -3.0345751082467562f) * inv_size, mip);
  s += -0.0826844273824397f * t.SampleLevel(uv + vec2(0.0f,  3.0345751082467562f) * inv_size, mip);
  s += -0.0826844273824397f * t.SampleLevel(uv + vec2( 3.0345751082467562f, 0.0f) * inv_size, mip);
  s +=  0.3326844273824397f * t.SampleLevel(uv + vec2(-0.7629477704209346f,  0.7629477704209346f) * inv_size, mip);
  s +=  0.3326844273824397f * t.SampleLevel(uv + vec2(-0.7629477704209346f, -0.7629477704209346f) * inv_size, mip);
  s +=  0.3326844273824397f * t.SampleLevel(uv + vec2( 0.7629477704209346f, -0.7629477704209346f) * inv_size, mip);
  s +=  0.3326844273824397f * t.SampleLevel(uv + vec2( 0.7629477704209346f,  0.7629477704209346f) * inv_size, mip);
  return s;
}

[numthreads(LTM_REDUCE_GROUP_SIZE_X * LTM_REDUCE_GROUP_SIZE_Y)]
void main() {
  uvec2 lxy = swizzle_quads(gl_LocalInvocationIndex, LTM_REDUCE_GROUP_SIZE_X);

  Sampler2D src_lightness = Get(pc.src_lightness);
  Sampler2D src_weights = Get(pc.src_weights);
  RWTexture2D dst_lightness = Get(pc.dst_lightness);
  RWTexture2D dst_weights = Get(pc.dst_weights);

  vec2 inv_src_size = 1.0f / TextureSize(src_lightness, pc.src_mip);
  ivec2 pos = gl_WorkGroupID.xy * LTM_REDUCE_TILE_SIZE + lxy;
  vec2 uv = (2 * pos + 1) * inv_src_size;

  vec3 lightness = filter(src_lightness, uv, inv_src_size, pc.src_mip).rgb;
  if (all(pos < TextureSize(dst_lightness))) {
    dst_lightness.Store(pos, vec4(lightness, 1.0f));
  }

  vec2 weight = filter(src_weights, uv, inv_src_size, pc.src_mip).rg;
  if (all(pos < TextureSize(dst_lightness))) {
    dst_weights.Store(pos, vec4(weight, 0.0f, 1.0f));
  }
}

}
