#include "ReduceLuminanceHistogram.h"
#include "PostProcessing.h"

namespace ren::sh {

[[vk::push_constant]] ReduceLuminanceHistogramArgs pc;

shared uint luminance_histogram[NUM_LUMINANCE_HISTOGRAM_BINS];

[numthreads(NUM_LUMINANCE_HISTOGRAM_BINS)]
void main() {
  uint index = gl_LocalInvocationIndex;

  luminance_histogram[index] = pc.luminance_histogram[index];
  barrier();

  if (index != 0) {
    return;
  }

  float log_luminance = MIN_LOG_LUMINANCE;
  uint weight = 1;
  for (int i = 1; i < NUM_LUMINANCE_HISTOGRAM_BINS; ++i) {
    float bin_log_luminance = mix(MIN_LOG_LUMINANCE, MAX_LOG_LUMINANCE, float(i) / (NUM_LUMINANCE_HISTOGRAM_BINS - 1));
    log_luminance += bin_log_luminance * luminance_histogram[i];
    weight += luminance_histogram[i];
  }
  log_luminance /= weight;

  float old_exposure = *pc.exposure;
  log_luminance -= log2(old_exposure);
  float exposure = automatic_exposure(log_luminance, pc.exposure_compensation);
  float adaptation_time = exposure > old_exposure ? pc.dark_adaptation_time : pc.bright_adaptation_time;
  // e^-5 ~= 0.6%
  float m = 1.0f - exp(-5.0f*pc.dt/adaptation_time);
  float new_exposure = mix(old_exposure, exposure, m);

  *pc.exposure = new_exposure;
}

}
