#include "BakeIrradianceMap.h"
#include "Texture.glsl"
#include "Random.h"
#include "Lighting.h"

vec3 integrate_irradiance_map(vec3 n, SampledTexture2D equirectangular_map) {
  vec3 i = vec3(0.0f);
  const uint NUM_SAMPLES = 4096;
  for (uint k = 0; k < NUM_SAMPLES; ++k) {
    vec3 l = importance_sample_lambertian(hammersley(k, NUM_SAMPLES), n);
    float nl = dot(n, l);
    if (nl > 0.0f) {
      // TODO: select mip based on solid angle.
      vec2 uv = direction_to_equirectangular_uv(l);
      i += texture_lod(equirectangular_map, uv, 0.0f).rgb;
    }
  }
  return PI * i / NUM_SAMPLES;
}

LOCAL_SIZE_2D(16, 16);
void main()
{
  const uvec2 pos = gl_GlobalInvocationID.xy;
  const uint face = gl_GlobalInvocationID.z;
  vec3 n = cube_map_face_pos_to_direction(pos, face, image_size(pc.irradiance_map));
  vec3 i = integrate_irradiance_map(normalize(n), pc.equirectangular_map);
  image_store(pc.irradiance_map, ivec3(pos, face), i);
}
