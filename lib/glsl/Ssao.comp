#include "Ssao.h"
#include "Lighting.h"
#include "Random.h"
#include "Texture.glsl"
#include "Vertex.h"

vec3 importance_sample_ao_volume(vec3 xi, vec3 n, out float ro) {
  // p(r/R) = 1 - r/R
  // P(r/R) = 2 * (r/R) - (r/R)^2 = 1 - (1 - r/R)^2
  // r/R = 1 - sqrt(1 - a)
  ro = 1.0f - sqrt(1.0f - xi.z);
  return importance_sample_cosine_weighted_hemisphere(xi.xy, n);
}

float integrate_ao(vec3 p, vec3 n) {
  float ka = 0.0f;
  for (uint k = 1; k <= pc.num_samples; ++k) {
    vec3 xi = hammersley_3d(k, pc.num_samples);
    float ro;
    vec3 l = importance_sample_ao_volume(xi, n, ro);
    vec3 ndc_sample = view_to_ndc(pc.proj, p + l * (ro * pc.radius));
    vec2 uv = ndc_to_uv(ndc_sample.xy);
    float d = ndc_sample.z;
    ka += texture_lod(pc.depth, uv, 0.0f).r > d ? ro : 1.0f;
  }
  return ka / pc.num_samples;
}

LOCAL_SIZE_2D(16, 16);
void main() {
  const uvec2 pos = gl_GlobalInvocationID.xy;

  // Reconstruct normal from depth buffer:
  // https://atyuwen.github.io/posts/normal-reconstruction
  // This works fine in general, but fails for small or thin triangles.
  // TODO: as a fallback, try to derive the normal by viewing the depth buffer as a height-map and differentiating it.

  // TODO: half-resolution.
  vec2 inv_size = 1.0f / texture_size(pc.depth);

  vec2 uv = (pos + 0.5f) * inv_size;

  float d = texture_lod(pc.depth, uv, 0.0f).r;
  vec3 p0 = ndc_to_view(pc.inv_proj, vec3(uv_to_ndc(uv), d));
  bool flipn = false;

  vec3 pt;
  {
    vec4 h;
    h.z = texture_lod(pc.depth, uv - vec2(2, 0) * inv_size, 0.0f).r;
    h.x = texture_lod(pc.depth, uv - vec2(1, 0) * inv_size, 0.0f).r;
    h.y = texture_lod(pc.depth, uv + vec2(1, 0) * inv_size, 0.0f).r;
    h.w = texture_lod(pc.depth, uv + vec2(2, 0) * inv_size, 0.0f).r;

    vec2 he = abs(2.0f * h.xy - h.zw - d);
    if (he.x < he.y) {
      pt = vec3(uv_to_ndc((pos + vec2(-0.5f, 0.5f)) * inv_size), h.x);
      flipn = true;
    } else {
      pt = vec3(uv_to_ndc((pos + vec2( 1.5f, 0.5f)) * inv_size), h.y);
    }
    pt = ndc_to_view(pc.inv_proj, pt);
  }

  vec3 pb;
  {
    vec4 v;
    v.z = texture_lod(pc.depth, uv - vec2(0, 2) * inv_size, 0.0f).r;
    v.x = texture_lod(pc.depth, uv - vec2(0, 1) * inv_size, 0.0f).r;
    v.y = texture_lod(pc.depth, uv + vec2(0, 1) * inv_size, 0.0f).r;
    v.w = texture_lod(pc.depth, uv + vec2(0, 2) * inv_size, 0.0f).r;
  
    vec2 ve = abs(2.0f * v.xy - v.zw - d);
    if (ve.x < ve.y) {
      pb = vec3(uv_to_ndc((pos + vec2(0.5f, -0.5f)) * inv_size), v.x);
    } else {
      pb = vec3(uv_to_ndc((pos + vec2(0.5f,  1.5f)) * inv_size), v.y);
      flipn = !flipn;
    }
    pb = ndc_to_view(pc.inv_proj, pb);
  }

  vec3 t = pt - p0;
  vec3 b = pb - p0;
  vec3 n = normalize(cross(t, b));
  n = flipn ? -n : n;

  float ka = integrate_ao(p0, n);

  image_store(pc.ssao, ivec2(pos), ka);
}
