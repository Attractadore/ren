#include "HiZSpd.h"
#include "Texture.glsl"

const uvec2 GROUP_SIZE = uvec2(HI_Z_SPD_THREADS_X, HI_Z_SPD_THREADS_Y);
const uvec2 THREAD_SIZE =
    uvec2(HI_Z_SPD_THREAD_ELEMS_X, HI_Z_SPD_THREAD_ELEMS_X);
const uint TILE_SIZE = HI_Z_SPD_TILE_SIZE;
const uint NUM_TILE_MIPS = HI_Z_SPD_NUM_TILE_MIPS;

shared float tile[TILE_SIZE][TILE_SIZE + 1];
shared bool quit;

void load_tile_from_src(StorageTexture2D dst, uvec2 tile_pos) {
  vec2 dst_pixel_size = 1.0f / pc.dst_size;
  uvec2 base_pos = tile_pos * uvec2(TILE_SIZE);
  for (uint x = gl_LocalInvocationID.x; x < TILE_SIZE; x += GROUP_SIZE.x) {
    for (uint y = gl_LocalInvocationID.y; y < TILE_SIZE; y += GROUP_SIZE.y) {
      ivec2 pos = ivec2(base_pos) + ivec2(x, y);
      vec2 uv = (pos + vec2(0.5f)) * dst_pixel_size;
      float depth = texture_lod(pc.src, uv, 0).r;
      image_store(dst, pos, depth);
      tile[y][x] = depth;
    }
  }
  barrier();
}

void load_tile_from_dst(StorageTexture2D dst) {
  uvec2 size = pc.dst_size >> (NUM_TILE_MIPS - 1);
  for (uint x = gl_LocalInvocationID.x; x < TILE_SIZE; x += GROUP_SIZE.x) {
    for (uint y = gl_LocalInvocationID.y; y < TILE_SIZE; y += GROUP_SIZE.y) {
      float depth = 1.0f;
      ivec2 pos = ivec2(x, y);
      if (all(lessThan(pos, size))) {
        depth = image_coherent_load(dst, pos).r;
      }
      tile[y][x] = depth;
    }
  }
  barrier();
}

void reduce_tile(StorageTexture2D dst, uvec2 tile_pos, uint tile_mip) {
  uvec2 tile_size = uvec2(TILE_SIZE >> tile_mip);
  uvec2 size = max(tile_size, GROUP_SIZE);
  uvec2 base_pos = tile_pos * tile_size;

  for (uint x = gl_LocalInvocationID.x; x < size.x; x += GROUP_SIZE.x) {
    for (uint y = gl_LocalInvocationID.y; y < size.y; y += GROUP_SIZE.y) {
      uvec2 dst_pos = uvec2(x, y);
      ivec2 pos = ivec2(base_pos + dst_pos);

      float depth = 1.0f;

      bool store = all(lessThan(dst_pos, tile_size));
      if (store) {
        depth = min(depth, tile[2 * y + 0][2 * x + 0]);
        depth = min(depth, tile[2 * y + 0][2 * x + 1]);
        depth = min(depth, tile[2 * y + 1][2 * x + 0]);
        depth = min(depth, tile[2 * y + 1][2 * x + 1]);
        if (tile_mip == NUM_TILE_MIPS - 1) {
          image_coherent_store(dst, pos, depth);
        } else {
          image_store(dst, pos, depth);
        }
      }

      barrier();

      if (store) {
        tile[y][x] = depth;
      }
    }
  }

  barrier();
}

LOCAL_SIZE_2D(GROUP_SIZE.x, GROUP_SIZE.y);
void main() {
  load_tile_from_src(pc.dsts[0], gl_WorkGroupID.xy);
  for (uint mip = 1; mip < NUM_TILE_MIPS; ++mip) {
    if (mip == pc.num_dst_mips) {
      break;
    }
    reduce_tile(pc.dsts[mip], gl_WorkGroupID.xy, mip);
  }

  // If destination fits in one tile, early out.
  if (all(lessThanEqual(pc.dst_size, uvec2(TILE_SIZE)))) {
    return;
  }

  if (gl_LocalInvocationIndex == 0) {
    const uint num_groups = gl_NumWorkGroups.x * gl_NumWorkGroups.y;
    uint num_finished = 1 + atomicAdd(DEREF(pc.counter), 1, gl_ScopeQueueFamily, gl_StorageSemanticsImage, gl_SemanticsRelease);
    quit = num_finished < num_groups;
  }

  barrier();

  if (quit) {
    return;
  }

  memoryBarrier(gl_ScopeQueueFamily, gl_StorageSemanticsImage, gl_SemanticsAcquire);

  load_tile_from_dst(pc.dsts[NUM_TILE_MIPS - 1]);
  for (uint tile_mip = 1; tile_mip < NUM_TILE_MIPS; ++tile_mip) {
    uint mip = tile_mip + NUM_TILE_MIPS - 1;
    if (mip == pc.num_dst_mips) {
      break;
    }
    reduce_tile(pc.dsts[mip], uvec2(0, 0), tile_mip);
  }

  if (gl_LocalInvocationIndex == 0) {
    DEREF(pc.counter) = 0;
  }
}
