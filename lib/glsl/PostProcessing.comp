#include "PostProcessing.h"
#include "Texture.glsl"

const uint THREADS_X = 8;
const uint THREADS_Y = 8;

shared uint histogram[NUM_LUMINANCE_HISTOGRAM_BINS];

float get_luminance(vec3 color) {
  return dot(color, vec3(0.2126f, 0.7152f, 0.0722f));
}

void init_luminance_histogram() {
  uint i = gl_LocalInvocationIndex;
  const uint stride = THREADS_X * THREADS_Y;
  for (;i < NUM_LUMINANCE_HISTOGRAM_BINS; i += stride) {
    histogram[i] = 0;
  }
  barrier();
}

void add_to_luminance_histogram(float luminance) {
  luminance = max(luminance, MIN_LUMINANCE);
  float alpha = (log2(luminance) - MIN_LOG_LUMINANCE) /
                (MAX_LOG_LUMINANCE - MIN_LOG_LUMINANCE);
  int bin = int(alpha * NUM_LUMINANCE_HISTOGRAM_BINS);
  // Ignore bin 0
  if (bin > 0) {
    atomicAdd(histogram[bin], 1, gl_ScopeWorkgroup, 0, gl_SemanticsRelaxed);
  }
}

void store_luminance_histogram() {
  barrier();
  uint i = gl_LocalInvocationIndex;
  const uint stride = THREADS_X * THREADS_Y;
  for (; i < NUM_LUMINANCE_HISTOGRAM_BINS; i += stride) {
    // Ignore bin 0 and zero-valued bins
    if (i > 0 && histogram[i] > 0) {
      atomicAdd(DEREF(pc.histogram).bins[i], histogram[i], gl_ScopeQueueFamily, 0, gl_SemanticsRelaxed);
    }
  }
}

LOCAL_SIZE_2D(THREADS_X, THREADS_Y);
void main() {
  const ivec2 size = texture_size(pc.hdr);
  const ivec2 stride = ivec2(gl_NumWorkGroups.xy) * ivec2(THREADS_X, THREADS_Y);

  float exposure;
  bool enable_automatic_exposure = !IS_NULL_PTR(pc.histogram);
  if (enable_automatic_exposure) {
    exposure = texel_fetch(pc.previous_exposure, ivec2(0), 0).r;
    init_luminance_histogram();
  }

  const ivec2 start = ivec2(gl_GlobalInvocationID.xy);
  for (int x = start.x; x < size.x; x += stride.x) {
    for (int y = start.y; y < size.y; y += stride.y) {
      vec4 color = texel_fetch(pc.hdr, ivec2(x, y), 0);
      float luminance = get_luminance(color.rgb);

      if (enable_automatic_exposure) {
        add_to_luminance_histogram(luminance / exposure);
      }

      // Tone mapping
      color.rgb /= (1.0f + luminance);

      image_store(pc.sdr, ivec2(x, y), color);
    }
  }

  if (enable_automatic_exposure) {
    store_luminance_histogram();
  }
}
