#include "BakeSpecularMap.h"
#include "Texture.glsl"
#include "Random.h"
#include "Lighting.h"

vec3 integrate_specular_map(float roughness, vec3 r, SampledTexture2D equirectangular_map) {
  vec3 n = r;
  vec3 v = r;
  vec3 i = vec3(0.0f);
  float weight = 0.0f;
  const uint NUM_SAMPLES = 1024;
  for (uint k = 1; k <= NUM_SAMPLES; ++k) {
    vec3 h = importance_sample_ggx(hammersley_2d(k, NUM_SAMPLES), roughness, n);
    vec3 l = 2.0f * dot(h, v) * h - v;
    float nl = dot(n, l);
    if (nl > 0.0f) {
      // TODO: select mip based on solid angle.
      vec2 uv = direction_to_equirectangular_uv(l);
      i += texture_lod(equirectangular_map, uv, 0.0f).rgb * nl;
      weight += nl;
    }
  }
  return i / weight;
}

LOCAL_SIZE_2D(16, 16);
void main()
{
  const uvec2 pos = gl_GlobalInvocationID.xy;
  const uint face = gl_GlobalInvocationID.z;
  vec3 r = cube_map_face_pos_to_direction(pos, face, image_size(pc.specular_map));
  vec3 i = integrate_specular_map(pc.roughness, normalize(r), pc.equirectangular_map);
  image_store(pc.specular_map, ivec3(pos, face), i);
}
